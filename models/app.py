import warnings
import pandas as pd
import os
import plotly.express as px
import plotly.graph_objects as go # C·∫ßn cho bi·ªÉu ƒë·ªì r·ªóng
import dash
from dash import dcc, html, Input, Output, State, no_update
import calendar

# B·ªè qua (ignore) c√°c c·∫£nh b√°o lo·∫°i PerformanceWarning t·ª´ Pandas
warnings.filterwarnings('ignore', category=pd.errors.PerformanceWarning)

# ==================== 1. ƒê·ªåC V√Ä X·ª¨ L√ù D·ªÆ LI·ªÜU (Th·ª±c hi·ªán m·ªôt l·∫ßn khi kh·ªüi ch·∫°y) ====================
print("üîÑ B·∫Øt ƒë·∫ßu ƒë·ªçc v√† x·ª≠ l√Ω d·ªØ li·ªáu...")
parquet_folder = r"C:\Khue\TDN\data\processed" # <-- ƒê·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n n√†y ch√≠nh x√°c
df_sanluong = pd.DataFrame() # Kh·ªüi t·∫°o DataFrame r·ªóng

try:
    all_files_in_folder = os.listdir(parquet_folder)
    parquet_files = [os.path.join(parquet_folder, f)
                     for f in all_files_in_folder
                     if f.startswith("sanluong_") and f.endswith(".parquet")]

    if not parquet_files:
        print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file n√†o kh·ªõp m·∫´u 'sanluong_*.parquet' trong th∆∞ m·ª•c: {parquet_folder}")
    else:
        df_list = []
        for f in parquet_files:
            try:
                df_list.append(pd.read_parquet(f, engine='pyarrow'))
            except Exception as e:
                print(f"‚ùå L·ªói khi ƒë·ªçc file {f}: {e}")

        if df_list:
            df_all = pd.concat(df_list, ignore_index=True)
            print(f"‚úÖ ƒê√£ ƒë·ªçc xong {len(parquet_files)} file parquet. T·ªïng s·ªë d√≤ng ban ƒë·∫ßu: {df_all.shape[0]:,}")

            # --- X·ª≠ l√Ω df_sanluong ---
            required_cols = ['CTDL', 'NMTD', 'MADIEMDO', 'ENDTIME', 'CS']
            if all(col in df_all.columns for col in required_cols):
                df_sanluong = df_all[required_cols].copy()
                df_sanluong.rename(columns={'ENDTIME': 'TIME'}, inplace=True)

                # ++++++++++++++++ T·ªêI ∆ØU H√ìA KI·ªÇU D·ªÆ LI·ªÜU (B·∫ÆT ƒê·∫¶U) ++++++++++++++++
                if not df_sanluong.empty:
                    print("üîÑ T·ªëi ∆∞u h√≥a ki·ªÉu d·ªØ li·ªáu DataFrame...")
                    mem_usage_before_opt = df_sanluong.memory_usage(deep=True).sum() / (1024**2)
                    print(f"   üìä B·ªô nh·ªõ s·ª≠ d·ª•ng TR∆Ø·ªöC khi t·ªëi ∆∞u: {mem_usage_before_opt:.2f} MB")

                    # Chuy·ªÉn ƒë·ªïi c√°c c·ªôt ID/chu·ªói l·∫∑p l·∫°i th√†nh 'category'
                    for col in ['CTDL', 'NMTD', 'MADIEMDO']:
                        if col in df_sanluong.columns:
                            try:
                                df_sanluong[col] = df_sanluong[col].astype('category')
                                print(f"   ‚úÖ ƒê√£ chuy·ªÉn c·ªôt '{col}' sang ki·ªÉu 'category'.")
                            except Exception as e:
                                print(f"   ‚ö†Ô∏è Kh√¥ng th·ªÉ chuy·ªÉn c·ªôt '{col}' sang category: {e}")

                    # Chuy·ªÉn ƒë·ªïi c·ªôt s·ªë c√¥ng su·∫•t sang float32 n·∫øu c√≥ th·ªÉ
                    if 'CS' in df_sanluong.columns:
                        try:
                            df_sanluong['CS'] = pd.to_numeric(df_sanluong['CS'], errors='coerce') # ƒê·∫£m b·∫£o l√† s·ªë
                            # Ch·ªâ downcast n·∫øu kh√¥ng m·∫•t m√°t l·ªõn (ki·ªÉm tra min/max n·∫øu c·∫ßn)
                            df_sanluong['CS'] = df_sanluong['CS'].astype('float32')
                            print("   ‚úÖ ƒê√£ chuy·ªÉn c·ªôt 'CS' sang ki·ªÉu 'float32'.")
                        except Exception as e:
                            print(f"   ‚ö†Ô∏è Kh√¥ng th·ªÉ chuy·ªÉn c·ªôt 'CS' sang float32: {e}")

                    mem_usage_after_opt = df_sanluong.memory_usage(deep=True).sum() / (1024**2)
                    print(f"   üìä B·ªô nh·ªõ s·ª≠ d·ª•ng SAU khi t·ªëi ∆∞u ki·ªÉu d·ªØ li·ªáu c∆° b·∫£n: {mem_usage_after_opt:.2f} MB")
                # ++++++++++++++++ T·ªêI ∆ØU H√ìA KI·ªÇU D·ªÆ LI·ªÜU (K·∫æT TH√öC) ++++++++++++++++


                # --- Ti·∫øp t·ª•c x·ª≠ l√Ω th·ªùi gian v√† index ---
                print("üîÑ X·ª≠ l√Ω th·ªùi gian v√† t·ªëi ∆∞u DataFrame...")
                try:
                    df_sanluong['TIME'] = pd.to_datetime(df_sanluong['TIME'])

                    # T·∫†O v√† T·ªêI ∆ØU ki·ªÉu d·ªØ li·ªáu c·ªôt th·ªùi gian NGAY L·∫¨P T·ª®C
                    df_sanluong['YEAR'] = df_sanluong['TIME'].dt.year.astype('int16') # NƒÉm th∆∞·ªùng ƒë·ªß int16
                    df_sanluong['MONTH_NUM'] = df_sanluong['TIME'].dt.month.astype('int8') # Th√°ng ƒë·ªß int8
                    df_sanluong['DAY_NUM'] = df_sanluong['TIME'].dt.day.astype('int8')    # Ng√†y ƒë·ªß int8
                    print("   ‚úÖ ƒê√£ t·∫°o v√† t·ªëi ∆∞u ki·ªÉu d·ªØ li·ªáu c·ªôt YEAR, MONTH_NUM, DAY_NUM.")

                    mem_usage_after_time = df_sanluong.memory_usage(deep=True).sum() / (1024**2)
                    print(f"   üìä B·ªô nh·ªõ s·ª≠ d·ª•ng sau khi th√™m c·ªôt th·ªùi gian t·ªëi ∆∞u: {mem_usage_after_time:.2f} MB")


                    # --- Ti·∫øp t·ª•c ƒë·∫∑t index v√† s·∫Øp x·∫øp ---
                    index_cols = ['CTDL', 'NMTD', 'YEAR', 'MONTH_NUM', 'DAY_NUM']
                    if all(col in df_sanluong.columns for col in index_cols):
                        print("   ‚è≥ B·∫Øt ƒë·∫ßu ƒë·∫∑t index...")
                        df_sanluong.set_index(index_cols, inplace=True)
                        print("   ‚è≥ B·∫Øt ƒë·∫ßu s·∫Øp x·∫øp index (c√≥ th·ªÉ m·∫•t th·ªùi gian v√† b·ªô nh·ªõ)...")
                        df_sanluong.sort_index(inplace=True) # ƒê√¢y v·∫´n l√† b∆∞·ªõc t·ªën k√©m nh·∫•t
                        print("‚úÖ ƒê√£ x·ª≠ l√Ω th·ªùi gian v√† t·ªëi ∆∞u index DataFrame.")
                        mem_usage_final = df_sanluong.memory_usage(deep=True).sum() / (1024**2)
                        print(f"   üìä B·ªô nh·ªõ s·ª≠ d·ª•ng cu·ªëi c√πng: {mem_usage_final:.2f} MB")
                    else:
                        print("‚ùå Thi·∫øu c·ªôt c·∫ßn thi·∫øt ƒë·ªÉ t·∫°o index t·ªëi ∆∞u.")
                        missing_idx_cols = [col for col in index_cols if col not in df_sanluong.columns]
                        print(f"   -> C√°c c·ªôt index b·ªã thi·∫øu: {missing_idx_cols}")
                        df_sanluong = pd.DataFrame() # ƒê·∫∑t l·∫°i th√†nh r·ªóng n·∫øu l·ªói
                except Exception as e: # B·∫Øt c·∫£ MemoryError v√† c√°c l·ªói kh√°c
                    print(f"‚ùå L·ªói khi x·ª≠ l√Ω th·ªùi gian ho·∫∑c ƒë·∫∑t index: {e}")
                    df_sanluong = pd.DataFrame() # ƒê·∫∑t l·∫°i th√†nh r·ªóng n·∫øu l·ªói
            else:
                print(f"‚ùå Thi·∫øu c·ªôt c·∫ßn thi·∫øt trong d·ªØ li·ªáu ban ƒë·∫ßu. C·∫ßn c√≥: {required_cols}")
                df_sanluong = pd.DataFrame()
        else:
            print("‚ùå Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c file n√†o th√†nh c√¥ng.")

except FileNotFoundError:
    print(f"‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c: {parquet_folder}")
    df_sanluong = pd.DataFrame() # ƒê·∫£m b·∫£o df_sanluong r·ªóng n·∫øu l·ªói
except Exception as e:
    print(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh khi truy c·∫≠p th∆∞ m·ª•c ho·∫∑c file: {e}")
    df_sanluong = pd.DataFrame() # ƒê·∫£m b·∫£o df_sanluong r·ªóng n·∫øu l·ªói


# --- L·∫•y danh s√°ch ban ƒë·∫ßu cho dropdowns (n·∫øu df_sanluong t·ªìn t·∫°i v√† kh√¥ng r·ªóng) ---
initial_ctdl_options = []
initial_year_options = []
if not df_sanluong.empty: # Ki·ªÉm tra l·∫°i df_sanluong sau x·ª≠ l√Ω
    try:
        # Ki·ªÉm tra xem index c√≥ t·ªìn t·∫°i kh√¥ng tr∆∞·ªõc khi truy c·∫≠p
        if isinstance(df_sanluong.index, pd.MultiIndex):
             if 'CTDL' in df_sanluong.index.names:
                 initial_ctdl_options = [{'label': c, 'value': c} for c in sorted(df_sanluong.index.get_level_values('CTDL').unique())]
             if 'YEAR' in df_sanluong.index.names:
                 initial_year_options = [{'label': y, 'value': y} for y in sorted(df_sanluong.index.get_level_values('YEAR').unique())]
        else:
             print("‚ö†Ô∏è DataFrame kh√¥ng c√≥ MultiIndex nh∆∞ mong ƒë·ª£i sau khi x·ª≠ l√Ω.")

    except Exception as e:
        print(f"‚ùå L·ªói khi l·∫•y danh s√°ch CTDL/Year ban ƒë·∫ßu t·ª´ index: {e}")

# ==================== 2. KH·ªûI T·∫†O ·ª®NG D·ª§NG DASH ====================
app = dash.Dash(__name__, suppress_callback_exceptions=True)
server = app.server

# ==================== 3. ƒê·ªäNH NGHƒ®A LAYOUT ·ª®NG D·ª§NG ====================
app.layout = html.Div([
    html.H1("Tr·ª±c Quan H√≥a D·ªØ Li·ªáu S·∫£n L∆∞·ª£ng", style={'textAlign': 'center'}),

    dcc.Tabs(id="tabs-main", value='tab-month', children=[
        # --- Tab Xem Theo Th√°ng ---
        dcc.Tab(label='üìÖ Xem theo th√°ng', value='tab-month', children=[
            html.Div([
                html.Div([
                    html.Label("CTDL:", style={'margin-right': '5px'}),
                    dcc.Dropdown(
                        id='ctdl-dropdown-month',
                        options=initial_ctdl_options,
                        # Ch·ªçn gi√° tr·ªã ƒë·∫ßu ti√™n n·∫øu c√≥, n·∫øu kh√¥ng th√¨ None
                        value=initial_ctdl_options[0]['value'] if initial_ctdl_options else None,
                        clearable=False,
                        style={'width': '300px', 'margin-right': '20px'}
                    )
                ], style={'display': 'flex', 'align-items': 'center'}),
                html.Div([
                    html.Label("Nh√† m√°y:", style={'margin-right': '5px'}),
                    dcc.Dropdown(
                        id='nmtd-dropdown-month',
                        options=[], # S·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t b·ªüi callback
                        placeholder="Ch·ªçn nh√† m√°y...",
                        clearable=False,
                        disabled=True, # B·∫Øt ƒë·∫ßu b·ªã v√¥ hi·ªáu h√≥a
                        style={'width': '300px', 'margin-right': '20px'}
                    )
                ], style={'display': 'flex', 'align-items': 'center'}),
                html.Div([
                     html.Label("NƒÉm:", style={'margin-right': '5px'}),
                     dcc.Dropdown(
                        id='year-dropdown-month',
                        options=initial_year_options,
                        value=initial_year_options[0]['value'] if initial_year_options else None,
                        clearable=False,
                        style={'width': '120px', 'margin-right': '20px'}
                     )
                ], style={'display': 'flex', 'align-items': 'center'}),
                html.Div([
                     html.Label("Th√°ng:", style={'margin-right': '5px'}),
                     dcc.Dropdown(
                        id='month-dropdown-month',
                        options=[{'label': m, 'value': m} for m in range(1, 13)],
                        value=1, # Gi√° tr·ªã th√°ng m·∫∑c ƒë·ªãnh
                        clearable=False,
                        style={'width': '120px'}
                    )
                ], style={'display': 'flex', 'align-items': 'center'}),
            ], style={'display': 'flex', 'padding': '20px', 'flexWrap': 'wrap'}) # flexWrap ƒë·ªÉ xu·ªëng d√≤ng tr√™n m√†n h√¨nh nh·ªè
        ]),

        # --- Tab Xem Theo Ng√†y ---
        dcc.Tab(label='üóìÔ∏è Xem theo ng√†y', value='tab-day', children=[
            html.Div([
                 html.Div([
                    html.Label("CTDL:", style={'margin-right': '5px'}),
                    dcc.Dropdown(
                        id='ctdl-dropdown-day',
                        options=initial_ctdl_options,
                        value=initial_ctdl_options[0]['value'] if initial_ctdl_options else None,
                        clearable=False,
                        style={'width': '300px', 'margin-right': '20px'}
                    )
                ], style={'display': 'flex', 'align-items': 'center'}),
                html.Div([
                    html.Label("Nh√† m√°y:", style={'margin-right': '5px'}),
                    dcc.Dropdown(
                        id='nmtd-dropdown-day',
                        options=[], # S·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t b·ªüi callback
                        placeholder="Ch·ªçn nh√† m√°y...",
                        clearable=False,
                        disabled=True,
                        style={'width': '300px', 'margin-right': '20px'}
                    )
                ], style={'display': 'flex', 'align-items': 'center'}),
                 html.Div([
                     html.Label("NƒÉm:", style={'margin-right': '5px'}),
                     dcc.Dropdown(
                        id='year-dropdown-day',
                        options=initial_year_options,
                        value=initial_year_options[0]['value'] if initial_year_options else None,
                        clearable=False,
                        style={'width': '120px', 'margin-right': '20px'}
                     )
                 ], style={'display': 'flex', 'align-items': 'center'}),
                html.Div([
                     html.Label("Th√°ng:", style={'margin-right': '5px'}),
                     dcc.Dropdown(
                        id='month-dropdown-day',
                        options=[{'label': m, 'value': m} for m in range(1, 13)],
                        value=1,
                        clearable=False,
                        style={'width': '120px', 'margin-right': '20px'}
                    )
                ], style={'display': 'flex', 'align-items': 'center'}),
                html.Div([
                     html.Label("Ng√†y:", style={'margin-right': '5px'}),
                     dcc.Dropdown(
                        id='day-dropdown-day',
                        options=[], # S·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t b·ªüi callback
                        placeholder="Ch·ªçn ng√†y...",
                        clearable=False,
                        disabled=True,
                        style={'width': '120px'}
                    )
                ], style={'display': 'flex', 'align-items': 'center'}),
            ], style={'display': 'flex', 'padding': '20px', 'flexWrap': 'wrap'})
        ]),
    ]),

    # --- Khu v·ª±c hi·ªÉn th·ªã bi·ªÉu ƒë·ªì v√† th√¥ng b√°o ---
    html.Div(id='status-message', style={'padding': '10px', 'font-style': 'italic', 'color': 'grey'}),
    dcc.Loading(
        id="loading-graph",
        type="circle",
        children=dcc.Graph(id='graph-output', figure=go.Figure()) # B·∫Øt ƒë·∫ßu v·ªõi bi·ªÉu ƒë·ªì tr·ªëng
    )
])

# ==================== 4. ƒê·ªäNH NGHƒ®A CALLBACKS ====================
# --- ƒê·ªìng b·ªô filter khi chuy·ªÉn sang tab ng√†y ---
@app.callback(
    Output('ctdl-dropdown-day', 'value'),
    Output('nmtd-dropdown-day', 'value'),
    Output('year-dropdown-day', 'value'),
    Output('month-dropdown-day', 'value'),
    Output('day-dropdown-day', 'value'),
    Input('tabs-main', 'value'),
    State('ctdl-dropdown-month', 'value'),
    State('nmtd-dropdown-month', 'value'),
    State('year-dropdown-month', 'value'),
    State('month-dropdown-month', 'value'),
)
def sync_to_day(tab, ctdl_m, nmtd_m, year_m, month_m):
    if tab == 'tab-day':
        return ctdl_m, nmtd_m, year_m, month_m, 1
    return dash.no_update, dash.no_update, dash.no_update, dash.no_update, dash.no_update



# --- ƒê·ªìng b·ªô filter khi chuy·ªÉn sang tab th√°ng ---
@app.callback(
    Output('ctdl-dropdown-month', 'value'),
    Output('nmtd-dropdown-month', 'value'),
    Output('year-dropdown-month', 'value'),
    Output('month-dropdown-month', 'value'),
    Input('tabs-main', 'value'),
    State('ctdl-dropdown-day', 'value'),
    State('nmtd-dropdown-day', 'value'),
    State('year-dropdown-day', 'value'),
    State('month-dropdown-day', 'value'),
)
def sync_to_month(tab, ctdl_d, nmtd_d, year_d, month_d):
    if tab == 'tab-month':
        return ctdl_d, nmtd_d, year_d, month_d
    return dash.no_update, dash.no_update, dash.no_update, dash.no_update
# --- Callback c·∫≠p nh·∫≠t NMTD cho tab Th√°ng ---
@app.callback(
    Output('nmtd-dropdown-month', 'options'),
    Output('nmtd-dropdown-month', 'value'),
    Output('nmtd-dropdown-month', 'disabled'),
    Input('ctdl-dropdown-month', 'value')
)
def update_nmtd_month(selected_ctdl):
    if not selected_ctdl or df_sanluong.empty:
        return [], None, True

    try:
        # Ki·ªÉm tra CTDL c√≥ trong index kh√¥ng
        if selected_ctdl not in df_sanluong.index.get_level_values('CTDL'):
             print(f"CTDL '{selected_ctdl}' kh√¥ng t·ªìn t·∫°i trong index (update_nmtd_month).")
             return [], None, True

        nmtd_options_list = sorted(df_sanluong.loc[selected_ctdl].index.get_level_values('NMTD').unique())
        nmtd_options = [{'label': n, 'value': n} for n in nmtd_options_list]

        if not nmtd_options:
            return [], None, True

        return nmtd_options, nmtd_options[0]['value'], False
    except Exception as e: # B·∫Øt c√°c l·ªói kh√°c, kh√¥ng ch·ªâ KeyError
        print(f"L·ªói khi c·∫≠p nh·∫≠t NMTD th√°ng cho CTDL '{selected_ctdl}': {e}")
        return [], None, True

# --- Callback c·∫≠p nh·∫≠t NMTD cho tab Ng√†y ---
@app.callback(
    Output('nmtd-dropdown-day', 'options'),
    Output('nmtd-dropdown-day', 'value'),
    Output('nmtd-dropdown-day', 'disabled'),
    Input('ctdl-dropdown-day', 'value')
)
def update_nmtd_day(selected_ctdl):
    if not selected_ctdl or df_sanluong.empty:
        return [], None, True
    try:
        if selected_ctdl not in df_sanluong.index.get_level_values('CTDL'):
            print(f"CTDL '{selected_ctdl}' kh√¥ng t·ªìn t·∫°i trong index (update_nmtd_day).")
            return [], None, True

        nmtd_options_list = sorted(df_sanluong.loc[selected_ctdl].index.get_level_values('NMTD').unique())
        nmtd_options = [{'label': n, 'value': n} for n in nmtd_options_list]
        if not nmtd_options:
            return [], None, True
        return nmtd_options, nmtd_options[0]['value'], False
    except Exception as e:
        print(f"L·ªói khi c·∫≠p nh·∫≠t NMTD ng√†y cho CTDL '{selected_ctdl}': {e}")
        return [], None, True

# --- Callback c·∫≠p nh·∫≠t Ng√†y cho tab Ng√†y ---
@app.callback(
    Output('day-dropdown-day', 'options'),
    Output('day-dropdown-day', 'value'),
    Output('day-dropdown-day', 'disabled'),
    Input('year-dropdown-day', 'value'),
    Input('month-dropdown-day', 'value'),
    State('day-dropdown-day', 'value') # Gi·ªØ gi√° tr·ªã ng√†y hi·ªán t·∫°i ƒë·ªÉ th·ª≠ duy tr√¨
)
def update_day_options_day(selected_year, selected_month, current_day_value):
    if not selected_year or not selected_month:
        return [], None, True # V√¥ hi·ªáu h√≥a n·∫øu ch∆∞a ch·ªçn NƒÉm/Th√°ng

    try:
        max_day = calendar.monthrange(selected_year, selected_month)[1]
        day_options = [{'label': d, 'value': d} for d in range(1, max_day + 1)]

        new_day_value = None
        if current_day_value is not None and 1 <= current_day_value <= max_day:
            new_day_value = current_day_value
        elif day_options:
             new_day_value = day_options[0]['value'] # Ng√†y 1

        return day_options, new_day_value, False # Tr·∫£ v·ªÅ options, gi√° tr·ªã m·ªõi, kh√¥ng v√¥ hi·ªáu h√≥a

    except Exception as e:
        print(f"L·ªói khi c·∫≠p nh·∫≠t ng√†y cho {selected_month}/{selected_year}: {e}")
        return [], None, True


# --- Callback ch√≠nh: C·∫≠p nh·∫≠t bi·ªÉu ƒë·ªì d·ª±a tr√™n tab v√† l·ª±a ch·ªçn ---
@app.callback(
    Output('graph-output', 'figure'),
    Output('status-message', 'children'),
    Input('tabs-main', 'value'), # Input: Tab n√†o ƒëang ƒë∆∞·ª£c ch·ªçn
    # Inputs t·ª´ Tab Th√°ng
    Input('ctdl-dropdown-month', 'value'),
    Input('nmtd-dropdown-month', 'value'),
    Input('year-dropdown-month', 'value'),
    Input('month-dropdown-month', 'value'),
    # Inputs t·ª´ Tab Ng√†y
    Input('ctdl-dropdown-day', 'value'),
    Input('nmtd-dropdown-day', 'value'),
    Input('year-dropdown-day', 'value'),
    Input('month-dropdown-day', 'value'),
    Input('day-dropdown-day', 'value')
)
def update_graph(active_tab,
                 ctdl_m, nmtd_m, year_m, month_m,
                 ctdl_d, nmtd_d, year_d, month_d, day_d):

    # N·∫øu DataFrame r·ªóng ngay t·ª´ ƒë·∫ßu, kh√¥ng l√†m g√¨ c·∫£
    if df_sanluong.empty:
         return go.Figure(), "L·ªói: Kh√¥ng c√≥ d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω ho·∫∑c x·∫£y ra l·ªói khi t·∫£i d·ªØ li·ªáu."

    ctx = dash.callback_context
    triggered_id = ctx.triggered[0]['prop_id'].split('.')[0] if ctx.triggered else 'initial load'

    # X√°c ƒë·ªãnh gi√° tr·ªã d·ª±a tr√™n tab ƒëang ho·∫°t ƒë·ªông HO·∫∂C tab c·ªßa input v·ª´a thay ƒë·ªïi
    ctdl, nmtd, year, month, day, mode = None, None, None, None, None, None

    if active_tab == 'tab-month' or triggered_id in ['ctdl-dropdown-month', 'nmtd-dropdown-month', 'year-dropdown-month', 'month-dropdown-month']:
         # ∆Øu ti√™n x·ª≠ l√Ω cho tab th√°ng n·∫øu input thu·ªôc tab th√°ng ho·∫∑c tab th√°ng ƒëang active
         if not all([ctdl_m, nmtd_m, year_m, month_m]):
             return dash.no_update, "Vui l√≤ng ch·ªçn ƒë·ªß CTDL, Nh√† m√°y, NƒÉm v√† Th√°ng."
         ctdl, nmtd, year, month, day = ctdl_m, nmtd_m, year_m, month_m, None
         mode = 'month'

    elif active_tab == 'tab-day' or triggered_id in ['ctdl-dropdown-day', 'nmtd-dropdown-day', 'year-dropdown-day', 'month-dropdown-day', 'day-dropdown-day']:
         # ∆Øu ti√™n x·ª≠ l√Ω cho tab ng√†y n·∫øu input thu·ªôc tab ng√†y ho·∫∑c tab ng√†y ƒëang active
         if not all([ctdl_d, nmtd_d, year_d, month_d, day_d]):
              return dash.no_update, "Vui l√≤ng ch·ªçn ƒë·ªß CTDL, Nh√† m√°y, NƒÉm, Th√°ng v√† Ng√†y."
         ctdl, nmtd, year, month, day = ctdl_d, nmtd_d, year_d, month_d, day_d
         mode = 'day'

    # N·∫øu kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c mode (tr∆∞·ªùng h·ª£p hi·∫øm), kh√¥ng c·∫≠p nh·∫≠t
    if mode is None:
        # C√≥ th·ªÉ v·∫Ω bi·ªÉu ƒë·ªì m·∫∑c ƒë·ªãnh ·ªü ƒë√¢y n·∫øu mu·ªën, thay v√¨ no_update
        # V√≠ d·ª•, v·∫Ω cho tab th√°ng n·∫øu c√≥ ƒë·ªß th√¥ng tin
        if all([ctdl_m, nmtd_m, year_m, month_m]):
             ctdl, nmtd, year, month, day = ctdl_m, nmtd_m, year_m, month_m, None
             mode = 'month'
        else:
             return go.Figure(), "Vui l√≤ng ch·ªçn c√°c t√πy ch·ªçn tr√™n m·ªôt tab."


    # --- Ph·∫ßn l·ªçc v√† v·∫Ω bi·ªÉu ƒë·ªì ---
    status = f"üîÑ ƒêang l·ªçc v√† v·∫Ω bi·ªÉu ƒë·ªì cho {nmtd} - {mode}..."
    filtered_df = pd.DataFrame()
    title_ext = ""

    try:
        # X√¢y d·ª±ng tuple index ƒë·ªÉ truy v·∫•n
        if mode == 'month':
            idx_query = (ctdl, nmtd, year, month)
            title_ext = f"{month}/{year}"
        else: # mode == 'day'
            idx_query = (ctdl, nmtd, year, month, day)
            title_ext = f"{day}/{month}/{year}"

        # Ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa index tr∆∞·ªõc khi truy c·∫≠p b·∫±ng .loc
        # S·ª≠ d·ª•ng pd.IndexSlice cho truy v·∫•n r√µ r√†ng h∆°n tr√™n MultiIndex (t√πy ch·ªçn, nh∆∞ng t·ªët)
        # slicer = pd.IndexSlice[idx_query] # B·ªè slicer n·∫øu d√πng tuple tr·ª±c ti·∫øp

        # Ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa index con tr∆∞·ªõc khi d√πng loc
        # C√°ch 1: Ki·ªÉm tra tr·ª±c ti·∫øp tuple (ƒë∆°n gi·∫£n h∆°n)
        if idx_query in df_sanluong.index:
             # L·ªçc b·∫±ng .loc v√† ch·ªâ l·∫•y c√°c c·ªôt c·∫ßn thi·∫øt ngay l·∫≠p t·ª©c
             # reset_index(drop=True) ƒë·ªÉ b·ªè MultiIndex c≈©
             filtered_df = df_sanluong.loc[idx_query, ['TIME', 'CS', 'MADIEMDO']].reset_index(drop=True)
        # C√°ch 2: D√πng try-except (an to√†n h∆°n n·∫øu index ph·ª©c t·∫°p)
        # try:
        #      filtered_df = df_sanluong.loc[idx_query, ['TIME', 'CS', 'MADIEMDO']].reset_index(drop=True)
        # except KeyError:
        #      filtered_df = pd.DataFrame() # Kh√¥ng t√¨m th·∫•y index

    except Exception as e: # B·∫Øt t·∫•t c·∫£ l·ªói, kh√¥ng ch·ªâ KeyError
        status = f"‚ùå L·ªói khi l·ªçc d·ªØ li·ªáu cho {idx_query}: {e}"
        print(status) # In l·ªói ra console server ƒë·ªÉ debug
        return go.Figure(), status # Tr·∫£ v·ªÅ bi·ªÉu ƒë·ªì tr·ªëng v√† th√¥ng b√°o

    if filtered_df.empty:
        status = f"‚ÑπÔ∏è Kh√¥ng c√≥ d·ªØ li·ªáu cho l·ª±a ch·ªçn: {ctdl}, {nmtd}, {title_ext}."
        return go.Figure(), status

    # --- V·∫Ω bi·ªÉu ƒë·ªì ---
    try:
        filtered_df = filtered_df.sort_values('TIME') # S·∫Øp x·∫øp l·∫°i theo th·ªùi gian

        fig = px.line(
            filtered_df, x='TIME', y='CS', color='MADIEMDO',
            render_mode='webgl',
            markers=True if mode == 'day' else False
        )

        # √Åp d·ª•ng layout y h·ªát nh∆∞ code g·ªëc c·ªßa b·∫°n
        fig.update_layout(
            title=None,
            annotations=[
                dict(
                    text=f"<b>C√¥ng su·∫•t theo chu k·ª≥ 30' - {nmtd} - {title_ext}</b>",
                    xref='paper', yref='paper', x=0.45, y=1.1,
                    xanchor='center', yanchor='top', showarrow=False,
                    font=dict(size=18, color='black')
                )
            ],
            template='plotly_white', height=600, hovermode='x unified',
            xaxis_title=None, yaxis_title='Gi√° tr·ªã c√¥ng su·∫•t',
            xaxis=dict(
                showgrid=True, gridcolor='lightgrey', griddash='dot',
                title_font=dict(size=14, color='black'),
                ticklabelposition='outside', ticks='outside', ticklen=8
            ),
            yaxis=dict(
                showgrid=True, gridcolor='lightgrey', griddash='dot', rangemode='tozero',
                title_font=dict(size=14, color='black', weight='bold'),
                ticklabelposition='outside', ticks='outside', ticklen=8
            ),
            margin=dict(l=60, r=40, t=80, b=80),
            paper_bgcolor='white', plot_bgcolor='#f0f8ff'
        )
        fig.add_annotation(
            text="<b>Th·ªùi gian</b>", xref='paper', yref='paper', x=0.45, y=-0.15,
            showarrow=False, font=dict(size=14, color='black')
        )
        fig.update_traces(line=dict(width=2), hovertemplate='Th·ªùi gian: %{x}<br>C√¥ng su·∫•t: %{y}')

        status = f"‚úÖ Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì cho {nmtd} - {title_ext}"
        return fig, status

    except Exception as e:
        status = f"‚ùå L·ªói khi v·∫Ω bi·ªÉu ƒë·ªì Plotly: {e}"
        print(status)
        return go.Figure(), status


# ==================== 5. CH·∫†Y ·ª®NG D·ª§NG ====================
if __name__ == '__main__':
    # Ki·ªÉm tra l·∫°i n·∫øu df_sanluong r·ªóng tr∆∞·ªõc khi ch·∫°y server
    if df_sanluong.empty:
         print("\n‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá ƒë·ªÉ kh·ªüi ch·∫°y ·ª©ng d·ª•ng Dash.")
         # B·∫°n c√≥ th·ªÉ th√™m logic ƒë·ªÉ hi·ªÉn th·ªã th√¥ng b√°o l·ªói n√†y tr√™n giao di·ªán web n·∫øu mu·ªën
         # V√≠ d·ª•: app.layout = html.Div("L·ªói t·∫£i d·ªØ li·ªáu, kh√¥ng th·ªÉ kh·ªüi ch·∫°y ·ª©ng d·ª•ng.")
         # Ho·∫∑c ƒë·ªÉ layout nh∆∞ c≈© nh∆∞ng bi·ªÉu ƒë·ªì s·∫Ω tr·ªëng v√† c√≥ th√¥ng b√°o l·ªói
         # Trong tr∆∞·ªùng h·ª£p n√†y, ta v·∫´n ch·∫°y server ƒë·ªÉ hi·ªÉn th·ªã l·ªói (n·∫øu c√≥ layout)
         print("\nüöÄ Kh·ªüi ch·∫°y Dash server (v·ªõi d·ªØ li·ªáu r·ªóng)...")
         print("M·ªü tr√¨nh duy·ªát v√† truy c·∫≠p: http://127.0.0.1:8050/")
         app.run(debug=True)
    else:
         print("\nüöÄ Kh·ªüi ch·∫°y Dash server...")
         print("M·ªü tr√¨nh duy·ªát v√† truy c·∫≠p: http://127.0.0.1:8050/")
         app.run(debug=True) # Thay run_server th√†nh run