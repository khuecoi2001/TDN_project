# -*- coding: utf-8 -*-
import pandas as pd
import warnings

# B·ªè qua (ignore) c√°c c·∫£nh b√°o lo·∫°i PerformanceWarning t·ª´ Pandas
warnings.filterwarnings("ignore", category=pd.errors.PerformanceWarning)
import os
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import ipywidgets as widgets
from IPython.display import display, clear_output, HTML
import calendar
import numpy as np
import time  # Th√™m ƒë·ªÉ ƒëo th·ªùi gian (t√πy ch·ªçn)

# ==================== CELL 1: ƒê·ªåC D·ªÆ LI·ªÜU ====================
print("üîÑ B·∫Øt ƒë·∫ßu ƒë·ªçc d·ªØ li·ªáu Parquet...")
start_read_time = time.time()  # ƒêo th·ªùi gian ƒë·ªçc
parquet_folder = r"C:\Khue\TDN\data\processed"

try:
    all_files_in_folder = os.listdir(parquet_folder)
    parquet_files = [
        os.path.join(parquet_folder, f)
        for f in all_files_in_folder
        if f.startswith("sanluong_") and f.endswith(".parquet")
    ]

    if not parquet_files:
        print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file Parquet trong: {parquet_folder}")
        df_all = pd.DataFrame()
    else:
        df_list = []
        print(f"üîç T√¨m th·∫•y {len(parquet_files)} file Parquet. B·∫Øt ƒë·∫ßu ƒë·ªçc...")
        for i, f in enumerate(parquet_files):
            try:
                df_temp = pd.read_parquet(f, engine="pyarrow")
                # Ch·ªâ ƒë·ªçc c√°c c·ªôt th·ª±c s·ª± c·∫ßn thi·∫øt ngay t·ª´ ƒë·∫ßu ƒë·ªÉ ti·∫øt ki·ªám b·ªô nh·ªõ
                required_cols_read = ["CTDL", "NMTD", "MADIEMDO", "ENDTIME", "CS"]
                if all(col in df_temp.columns for col in required_cols_read):
                    df_list.append(df_temp[required_cols_read])  # Ch·ªâ l·∫•y c·ªôt c·∫ßn thi·∫øt
                else:
                    print(f"   ‚ö†Ô∏è File {os.path.basename(f)} thi·∫øu c·ªôt, b·ªè qua.")
            except Exception as e:
                print(f"‚ùå L·ªói ƒë·ªçc file {os.path.basename(f)}: {e}")

        if df_list:
            print("   Gh√©p c√°c DataFrame...")
            df_all = pd.concat(df_list, ignore_index=True)
            print(f"‚úÖ ƒê·ªçc v√† gh√©p {len(df_list)} file th√†nh c√¥ng.")
            print(f"üëâ T·ªïng s·ªë d√≤ng: {df_all.shape[0]:,}")
            print(f"‚è±Ô∏è Th·ªùi gian ƒë·ªçc v√† gh√©p: {time.time() - start_read_time:.2f} gi√¢y")
            # Hi·ªÉn th·ªã th√¥ng tin b·ªô nh·ªõ (t√πy ch·ªçn)
            # df_all.info(memory_usage='deep')
        else:
            print("‚ùå Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c file n√†o th√†nh c√¥ng.")
            df_all = pd.DataFrame()

except FileNotFoundError:
    print(f"‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c: {parquet_folder}")
    df_all = pd.DataFrame()
except Exception as e:
    print(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh khi ƒë·ªçc file/th∆∞ m·ª•c: {e}")
    df_all = pd.DataFrame()


# ==================== CELL 2: TI·ªÄN X·ª¨ L√ù V√Ä T·ªêI ∆ØU H√ìA ====================
df_sanluong = pd.DataFrame()
df_sanluong_indexed = pd.DataFrame()

if not df_all.empty:
    print("\nüîÑ B·∫Øt ƒë·∫ßu ti·ªÅn x·ª≠ l√Ω v√† t·ªëi ∆∞u h√≥a...")
    start_process_time = time.time()
    try:
        # 1. ƒê·ªïi t√™n c·ªôt v√† ƒë·∫£m b·∫£o ki·ªÉu d·ªØ li·ªáu datetime
        df_sanluong = df_all.rename(
            columns={"ENDTIME": "TIME"}, errors="raise"
        )  # ƒê·∫£m b·∫£o c·ªôt t·ªìn t·∫°i
        df_sanluong["TIME"] = pd.to_datetime(df_sanluong["TIME"])

        # 2. ƒê·∫£m b·∫£o ki·ªÉu d·ªØ li·ªáu s·ªë cho CS v√† x·ª≠ l√Ω NaN
        df_sanluong["CS"] = pd.to_numeric(df_sanluong["CS"], errors="coerce")
        initial_rows = len(df_sanluong)
        df_sanluong.dropna(subset=["CS"], inplace=True)
        removed_rows = initial_rows - len(df_sanluong)
        if removed_rows > 0:
            print(f"   ‚ö†Ô∏è ƒê√£ lo·∫°i b·ªè {removed_rows:,} d√≤ng c√≥ gi√° tr·ªã CS kh√¥ng h·ª£p l·ªá.")

        # 3. T·∫°o c√°c c·ªôt th·ªùi gian c·∫ßn thi·∫øt
        df_sanluong["YEAR"] = df_sanluong["TIME"].dt.year.astype(
            "int16"
        )  # T·ªëi ∆∞u ki·ªÉu int
        df_sanluong["MONTH_NUM"] = df_sanluong["TIME"].dt.month.astype("int8")
        df_sanluong["DAY_NUM"] = df_sanluong["TIME"].dt.day.astype("int8")
        df_sanluong["TIME_SLOT"] = df_sanluong["TIME"].dt.strftime("%H:%M")

        # 4. T·ªëi ∆∞u ki·ªÉu d·ªØ li·ªáu Categorical cho c√°c c·ªôt chu·ªói l·∫∑p l·∫°i
        df_sanluong["CTDL"] = df_sanluong["CTDL"].astype("category")
        df_sanluong["NMTD"] = df_sanluong["NMTD"].astype("category")
        df_sanluong["MADIEMDO"] = df_sanluong["MADIEMDO"].astype("category")
        df_sanluong["TIME_SLOT"] = df_sanluong["TIME_SLOT"].astype("category")

        # df_sanluong b√¢y gi·ªù ch·ª©a t·∫•t c·∫£ d·ªØ li·ªáu c·∫ßn thi·∫øt v·ªõi ki·ªÉu t·ªëi ∆∞u
        print("   ‚úÖ DataFrame g·ªëc ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω v√† t·ªëi ∆∞u h√≥a ki·ªÉu d·ªØ li·ªáu.")
        # df_sanluong.info(memory_usage='deep') # Ki·ªÉm tra l·∫°i b·ªô nh·ªõ

        # 5. T·∫°o DataFrame ƒë∆∞·ª£c Index cho t√≠nh to√°n th·ªëng k√™ nhanh
        index_cols = ["CTDL", "NMTD", "MADIEMDO", "YEAR", "MONTH_NUM", "DAY_NUM"]
        # Ch·ªâ c·∫ßn TIME_SLOT v√† CS cho df_indexed
        df_sanluong_indexed = df_sanluong[index_cols + ["TIME_SLOT", "CS"]].copy()
        # Gi·ªØ ki·ªÉu category cho index ƒë·ªÉ ti·∫øt ki·ªám b·ªô nh·ªõ index
        df_sanluong_indexed.set_index(index_cols, inplace=True)
        df_sanluong_indexed.sort_index(inplace=True)  # R·∫•t quan tr·ªçng cho hi·ªáu nƒÉng loc
        print("   ‚úÖ DataFrame index cho th·ªëng k√™ ƒë√£ ƒë∆∞·ª£c t·∫°o v√† s·∫Øp x·∫øp.")
        # df_sanluong_indexed.info(memory_usage='deep')

        print(f"‚è±Ô∏è Th·ªùi gian ti·ªÅn x·ª≠ l√Ω: {time.time() - start_process_time:.2f} gi√¢y")

    except Exception as e:
        print(f"‚ùå L·ªói trong qu√° tr√¨nh ti·ªÅn x·ª≠ l√Ω: {e}")
        # ƒê·∫£m b·∫£o c·∫£ hai df ƒë·ªÅu r·ªóng n·∫øu c√≥ l·ªói
        df_sanluong = pd.DataFrame()
        df_sanluong_indexed = pd.DataFrame()
else:
    print("‚ÑπÔ∏è Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·∫ßu v√†o ƒë·ªÉ x·ª≠ l√Ω.")

# ==================== CELL 3: GIAO DI·ªÜN T∆Ø∆†NG T√ÅC V√Ä V·∫º BI·ªÇU ƒê·ªí ====================

# --- Ch·ªâ ti·∫øp t·ª•c n·∫øu d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng ---
if not df_sanluong.empty and not df_sanluong_indexed.empty:
    print("\nüîÑ T·∫°o giao di·ªán t∆∞∆°ng t√°c...")
    # ========== DANH S√ÅCH CHO DROPDOWN (L·∫•y t·ª´ categories ƒë·ªÉ nhanh h∆°n) ==========
    try:
        ctdl_list = sorted(df_sanluong["CTDL"].cat.categories)
        year_list = sorted(df_sanluong["YEAR"].unique())  # Year l√† s·ªë, d√πng unique
        # L·∫•y danh s√°ch NMTD ban ƒë·∫ßu (t·∫•t c·∫£) - s·∫Ω ƒë∆∞·ª£c l·ªçc sau
        nmtd_list_all = sorted(df_sanluong["NMTD"].cat.categories)
    except Exception as e:
        print(f"‚ùå L·ªói l·∫•y danh s√°ch dropdown: {e}")
        ctdl_list, year_list, nmtd_list_all = [], [], []

    # ========== H√ÄM T·∫†O DROPDOWN ==========
    def make_dropdown(options, description, width="250px", margin="0px 20px 0px 0px"):
        safe_options = list(options) if options is not None else []
        # Th√™m gi√° tr·ªã None v√†o ƒë·∫ßu n·∫øu mu·ªën c√≥ l·ª±a ch·ªçn tr·ªëng (t√πy ch·ªçn)
        # safe_options = [(None, '--Ch·ªçn--')] + safe_options
        return widgets.Dropdown(
            options=safe_options,
            description=description,
            value=safe_options[0] if safe_options else None,  # Ch·ªçn gi√° tr·ªã ƒë·∫ßu ti√™n
            layout=widgets.Layout(width=width, margin=margin),
            style={"description_width": "auto"},
            disabled=not bool(safe_options),
        )

    # ========== DROPDOWNS ==========
    # (T·∫°o dropdown nh∆∞ c≈©, s·ª≠ d·ª•ng ctdl_list, year_list)
    # Tab 1
    ctdl_dropdown_month_plot = make_dropdown(ctdl_list, "CTDL:", "300px")
    nmtd_dropdown_month_plot = make_dropdown([], "Nh√† m√°y:", "300px")  # B·∫Øt ƒë·∫ßu r·ªóng
    year_dropdown_month_plot = make_dropdown(year_list, "NƒÉm:", "120px")
    month_dropdown_month_plot = make_dropdown(list(range(1, 13)), "Th√°ng:", "120px")
    placeholder_month_plot = widgets.Label(
        value="", layout=widgets.Layout(width="120px", margin="0px 20px 0px 0px")
    )
    # Tab 2
    ctdl_dropdown_day_plot = make_dropdown(ctdl_list, "CTDL:", "300px")
    nmtd_dropdown_day_plot = make_dropdown([], "Nh√† m√°y:", "300px")
    year_dropdown_day_plot = make_dropdown(year_list, "NƒÉm:", "120px")
    month_dropdown_day_plot = make_dropdown(list(range(1, 13)), "Th√°ng:", "120px")
    day_dropdown_day_plot = make_dropdown([], "Ng√†y:", "120px")
    # Tab 3
    ctdl_dropdown_stat = make_dropdown(ctdl_list, "CTDL:", "300px")
    nmtd_dropdown_stat = make_dropdown([], "Nh√† m√°y:", "300px")
    madiemdo_dropdown_stat = make_dropdown([], "M√£ ƒëi·ªÉm ƒëo:", "300px")
    year_dropdown_stat = make_dropdown(year_list, "NƒÉm:", "120px")
    month_dropdown_stat = make_dropdown(list(range(1, 13)), "Th√°ng:", "120px")

    # ========== NH√ìM WIDGET ==========
    month_plot_widgets = [
        ctdl_dropdown_month_plot,
        nmtd_dropdown_month_plot,
        year_dropdown_month_plot,
        month_dropdown_month_plot,
    ]
    day_plot_widgets = [
        ctdl_dropdown_day_plot,
        nmtd_dropdown_day_plot,
        year_dropdown_day_plot,
        month_dropdown_day_plot,
        day_dropdown_day_plot,
    ]
    stat_widgets = [
        ctdl_dropdown_stat,
        nmtd_dropdown_stat,
        madiemdo_dropdown_stat,
        year_dropdown_stat,
        month_dropdown_stat,
    ]

    # ========== C·∫¨P NH·∫¨T NH√Ä M√ÅY (T·ªëi ∆∞u: L·ªçc tr√™n index category) ==========
    # Cache ƒë·ªÉ tr√°nh l·ªçc l·∫°i NMTD cho c√πng CTDL nhi·ªÅu l·∫ßn
    nmtd_cache = {}
    madiemdo_cache = {}

    def update_nmtd(ctdl_value, dropdown_to_update):
        global nmtd_cache
        options = []
        current_nmtd_value = dropdown_to_update.value

        if ctdl_value:
            if ctdl_value in nmtd_cache:  # Ki·ªÉm tra cache tr∆∞·ªõc
                options = nmtd_cache[ctdl_value]
            elif (
                not df_sanluong_indexed.empty
            ):  # Ch·ªâ l·ªçc n·∫øu ch∆∞a c√≥ trong cache v√† df t·ªìn t·∫°i
                try:
                    # L·∫•y NMTD categories t·ª´ index con t∆∞∆°ng ·ª©ng v·ªõi CTDL
                    # ƒêi·ªÅu n√†y nhanh h∆°n .loc[ctdl_value].index... tr√™n df l·ªõn
                    nmtd_options = (
                        df_sanluong_indexed.loc[ctdl_value]
                        .index.get_level_values("NMTD")
                        .unique()
                        .tolist()
                    )
                    options = sorted(nmtd_options)
                    nmtd_cache[ctdl_value] = options  # L∆∞u v√†o cache
                except KeyError:
                    options = []  # CTDL kh√¥ng c√≥ trong index
                except Exception as e:
                    print(f"L·ªói c·∫≠p nh·∫≠t NMTD cache cho '{ctdl_value}': {e}")
                    options = []

        # C·∫≠p nh·∫≠t dropdown nh∆∞ c≈©
        dropdown_to_update.options = options
        dropdown_to_update.disabled = not bool(options)
        if current_nmtd_value in options:
            dropdown_to_update.value = current_nmtd_value
        elif options:
            dropdown_to_update.value = options[0]
        else:
            dropdown_to_update.value = None

    def update_madiemdo(ctdl_value, nmtd_value, dropdown_to_update):
        global madiemdo_cache
        options = []
        current_madiemdo_value = dropdown_to_update.value

        if ctdl_value and nmtd_value:
            cache_key = f"{ctdl_value}_{nmtd_value}"
            if cache_key in madiemdo_cache:  # Ki·ªÉm tra cache tr∆∞·ªõc
                options = madiemdo_cache[cache_key]
            elif not df_sanluong.empty:  # Ch·ªâ l·ªçc n·∫øu ch∆∞a c√≥ trong cache
                try:
                    # L·∫•y danh s√°ch c√°c m√£ ƒëi·ªÉm ƒëo c·ªßa nh√† m√°y ƒë√£ ch·ªçn
                    madiemdo_options = (
                        df_sanluong[
                            (df_sanluong["CTDL"] == ctdl_value)
                            & (df_sanluong["NMTD"] == nmtd_value)
                        ]["MADIEMDO"]
                        .unique()
                        .tolist()
                    )

                    options = sorted(madiemdo_options)
                    madiemdo_cache[cache_key] = options  # L∆∞u v√†o cache
                except Exception as e:
                    print(f"L·ªói c·∫≠p nh·∫≠t MADIEMDO cache cho '{cache_key}': {e}")
                    options = []

        # C·∫≠p nh·∫≠t dropdown
        dropdown_to_update.options = options
        dropdown_to_update.disabled = not bool(options)
        if current_madiemdo_value in options:
            dropdown_to_update.value = current_madiemdo_value
        elif options:
            dropdown_to_update.value = options[0]
        else:
            dropdown_to_update.value = None

    # G·∫Øn observe v√† kh·ªüi t·∫°o NMTD (nh∆∞ c≈©)
    ctdl_dropdown_month_plot.observe(
        lambda change: update_nmtd(change["new"], nmtd_dropdown_month_plot),
        names="value",
    )
    ctdl_dropdown_day_plot.observe(
        lambda change: update_nmtd(change["new"], nmtd_dropdown_day_plot), names="value"
    )
    ctdl_dropdown_stat.observe(
        lambda change: update_nmtd(change["new"], nmtd_dropdown_stat), names="value"
    )
    nmtd_dropdown_stat.observe(
        lambda change: update_madiemdo(
            ctdl_dropdown_stat.value, change["new"], madiemdo_dropdown_stat
        ),
        names="value",
    )
    # Kh·ªüi t·∫°o
    if ctdl_dropdown_month_plot.value:
        update_nmtd(ctdl_dropdown_month_plot.value, nmtd_dropdown_month_plot)
    if ctdl_dropdown_day_plot.value:
        update_nmtd(ctdl_dropdown_day_plot.value, nmtd_dropdown_day_plot)
    if ctdl_dropdown_stat.value:
        update_nmtd(ctdl_dropdown_stat.value, nmtd_dropdown_stat)
    if ctdl_dropdown_stat.value and nmtd_dropdown_stat.value:
        update_madiemdo(
            ctdl_dropdown_stat.value, nmtd_dropdown_stat.value, madiemdo_dropdown_stat
        )

    # ========== GI·ªöI H·∫†N NG√ÄY (Nh∆∞ c≈©) ==========
    def update_day_options(*args):
        year = year_dropdown_day_plot.value
        month = month_dropdown_day_plot.value
        current_day = day_dropdown_day_plot.value
        day_options = []
        if year and month:
            try:
                max_day = calendar.monthrange(year, month)[1]
                day_options = list(range(1, max_day + 1))
            except Exception as e:
                print(f"L·ªói l·∫•y s·ªë ng√†y {month}/{year}: {e}")
        day_dropdown_day_plot.options = day_options
        day_dropdown_day_plot.disabled = not bool(day_options)
        if current_day in day_options:
            day_dropdown_day_plot.value = current_day
        elif day_options:
            day_dropdown_day_plot.value = 1
        else:
            day_dropdown_day_plot.value = None

    year_dropdown_day_plot.observe(update_day_options, names="value")
    month_dropdown_day_plot.observe(update_day_options, names="value")
    if year_dropdown_day_plot.value and month_dropdown_day_plot.value:
        update_day_options()

    # ========== V√ôNG OUTPUT CHUNG ==========
    out = widgets.Output()

    # ========== V·∫º BI·ªÇU ƒê·ªí THEO MADIEMDO (Tab 1 & 2 - T·ªëi ∆∞u l·ªçc) ==========
    def plot_filtered(mode, ctdl, nmtd, year, month, day=None):
        with out:
            clear_output(wait=True)
            plot_start_time = time.time()

            # Ki·ªÉm tra ƒë·∫ßu v√†o
            required_vals = [ctdl, nmtd, year, month]
            if mode == "day":
                required_vals.append(day)
            if not all(v is not None for v in required_vals):
                print("   ‚ö†Ô∏è Vui l√≤ng ch·ªçn ƒë·ªß c√°c b·ªô l·ªçc.")
                return

            filtered_df = pd.DataFrame()
            try:
                # *** T·ªëi ∆∞u l·ªçc: L·ªçc tr√™n df_sanluong ƒë√£ t·ªëi ∆∞u ki·ªÉu d·ªØ li·ªáu ***
                # T·∫°o mask boolean hi·ªáu qu·∫£
                mask = (
                    (df_sanluong["CTDL"] == ctdl)
                    & (df_sanluong["NMTD"] == nmtd)
                    & (df_sanluong["YEAR"] == year)
                    & (df_sanluong["MONTH_NUM"] == month)
                )
                if mode == "day":
                    mask &= df_sanluong["DAY_NUM"] == day

                # Ch·ªâ l·∫•y c√°c c·ªôt c·∫ßn thi·∫øt cho v·∫Ω (`TIME`, `CS`, `MADIEMDO`) sau khi l·ªçc
                filtered_df = df_sanluong.loc[mask, ["TIME", "CS", "MADIEMDO"]].copy()
                # S·∫Øp x·∫øp theo TIME l√† c·∫ßn thi·∫øt cho bi·ªÉu ƒë·ªì ƒë∆∞·ªùng
                filtered_df.sort_values("TIME", inplace=True)

            except Exception as e:
                print(f"‚ùå L·ªói khi l·ªçc d·ªØ li·ªáu cho bi·ªÉu ƒë·ªì: {e}")

            if filtered_df.empty:
                print("   ")
                return

            # --- V·∫Ω bi·ªÉu ƒë·ªì (Gi·ªØ c·∫•u h√¨nh g·ªëc, th√™m webgl) ---
            try:
                title_ext = (
                    f"{month}/{year}" if mode == "month" else f"{day}/{month}/{year}"
                )
                fig = px.line(
                    filtered_df,
                    x="TIME",
                    y="CS",
                    color="MADIEMDO",
                    render_mode="webgl",  # Quan tr·ªçng cho nhi·ªÅu ƒëi·ªÉm
                    markers=True if mode == "day" else False,
                )
                # √Åp d·ª•ng layout g·ªëc
                fig.update_layout(
                    title=None,
                    annotations=[
                        dict(
                            text=f"<b>C√¥ng su·∫•t theo chu k·ª≥ 30' - {nmtd} - {title_ext}</b>",
                            xref="paper",
                            yref="paper",
                            x=0.45,
                            y=1.1,
                            xanchor="center",
                            yanchor="top",
                            showarrow=False,
                            font=dict(size=18, color="black"),
                        )
                    ],
                    template="plotly_white",
                    height=600,
                    hovermode="x unified",
                    xaxis_title=None,
                    yaxis_title="Gi√° tr·ªã c√¥ng su·∫•t",
                    xaxis=dict(
                        showgrid=True,
                        gridcolor="lightgrey",
                        griddash="dot",
                        title_font=dict(size=14, color="black"),
                        ticklabelposition="outside",
                        ticks="outside",
                        ticklen=8,
                    ),
                    yaxis=dict(
                        showgrid=True,
                        gridcolor="lightgrey",
                        griddash="dot",
                        rangemode="tozero",
                        title_font=dict(size=14, color="black", weight="bold"),
                        ticklabelposition="outside",
                        ticks="outside",
                        ticklen=8,
                    ),
                    margin=dict(l=60, r=40, t=80, b=80),
                    paper_bgcolor="white",
                    plot_bgcolor="#f0f8ff",
                )
                fig.add_annotation(
                    text="<b>Th·ªùi gian</b>",
                    xref="paper",
                    yref="paper",
                    x=0.45,
                    y=-0.15,
                    showarrow=False,
                    font=dict(size=14, color="black"),
                )
                fig.update_traces(
                    line=dict(width=2),
                    hovertemplate="C√¥ng su·∫•t: %{y}",
                )

                fig.show()

            except Exception as e:
                print(f"‚ùå L·ªói khi v·∫Ω bi·ªÉu ƒë·ªì Plotly Express: {e}")

    # ========== V·∫º BI·ªÇU ƒê·ªí TH·ªêNG K√ä THEO KHUNG GI·ªú (Tab 3 - T·ªëi ∆∞u l·ªçc) ==========
    def plot_timeslot_stats(ctdl, nmtd, madiemdo, year, month):
        with out:
            clear_output(wait=True)

            if not all([ctdl, nmtd, year, month]):
                print("   ‚ö†Ô∏è Vui l√≤ng ch·ªçn ƒë·ªß CTDL, Nh√† m√°y, NƒÉm v√† Th√°ng.")
                return

            stats_by_time = pd.DataFrame()
            try:
                # *** T·ªëi ∆∞u l·ªçc: D√πng .loc tr√™n df_sanluong_indexed ***
                idx_query = (ctdl, nmtd, madiemdo, year, month)
                # Ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa index hi·ªáu qu·∫£ h∆°n
                if idx_query in df_sanluong_indexed.index.droplevel("DAY_NUM").unique():
                    # .loc tr·ª±c ti·∫øp tr√™n index ƒë√£ s·∫Øp x·∫øp l√† r·∫•t nhanh
                    monthly_data = df_sanluong_indexed.loc[
                        idx_query, ["TIME_SLOT", "CS"]
                    ]

                    if not monthly_data.empty:
                        # Group v√† Agg - b∆∞·ªõc n√†y th∆∞·ªùng nhanh tr√™n d·ªØ li·ªáu ƒë√£ l·ªçc
                        stats_by_time = monthly_data.groupby(
                            "TIME_SLOT", observed=True
                        )["CS"].agg(  # observed=True tƒÉng t·ªëc n·∫øu TIME_SLOT l√† category
                            min="min",
                            p25=lambda x: x.quantile(0.25),
                            p50="mean",
                            p75=lambda x: x.quantile(0.75),
                            max="max",
                        )
                        # S·∫Øp x·∫øp index (TIME_SLOT) n·∫øu ch∆∞a ƒë√∫ng th·ª© t·ª± (th∆∞·ªùng th√¨ groupby gi·ªØ nguy√™n)
                        stats_by_time = stats_by_time.sort_index()
                    else:
                        print("   ‚ÑπÔ∏è Kh√¥ng c√≥ d·ªØ li·ªáu chi ti·∫øt sau khi l·ªçc.")

            except KeyError:
                print("   ‚ÑπÔ∏è Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu (KeyError).")
            except Exception as e:
                print(f"‚ùå L·ªói t√≠nh to√°n th·ªëng k√™: {e}")

            if stats_by_time.empty:
                print("   ‚ÑπÔ∏è Kh√¥ng c√≥ d·ªØ li·ªáu cho l·ª±a ch·ªçn n√†y!")
                return

            # --- V·∫Ω bi·ªÉu ƒë·ªì (Gi·ªØ nguy√™n c·∫•u h√¨nh Plotly GO) ---
            try:
                fig = go.Figure()
                time_slots = stats_by_time.index
                p25 = stats_by_time["p25"]
                p75 = stats_by_time["p75"]
                p50 = stats_by_time["p50"]
                min_cs = stats_by_time["min"]
                max_cs = stats_by_time["max"]

                # 1. V√πng Min-Max (M√†u x√°m nh·∫°t gi·ªëng ·∫£nh)
                fig.add_trace(
                    go.Scatter(
                        x=time_slots,
                        y=max_cs,
                        mode="lines",
                        line=dict(width=0),
                        showlegend=False,
                        hoverinfo="skip",  # Kh√¥ng hi·ªán trong legend, kh√¥ng hover
                        hovertemplate="Max: %{y:.2f}<extra></extra>",  # B·ªè n·∫øu kh√¥ng c·∫ßn hover max
                    )
                )
                fig.add_trace(
                    go.Scatter(
                        x=time_slots,
                        y=min_cs,
                        mode="lines",
                        line=dict(width=0),
                        fill="tonexty",
                        fillcolor="rgba(211, 211, 211, 0.5)",  # Light Gray
                        name="Min-Max",  # T√™n trong legend
                        hoverinfo="skip",  # Ch·ªâ hi·ªÉn th·ªã hover ·ªü trace d∆∞·ªõi n·∫øu mu·ªën
                        hovertemplate="Min: %{y:.2f}<extra></extra>",  # B·ªè n·∫øu kh√¥ng c·∫ßn hover min
                    )
                )

                # 2. V√πng P25-P75 (M√†u xanh nh·∫°t gi·ªëng ·∫£nh)
                fig.add_trace(
                    go.Scatter(
                        x=time_slots,
                        y=p75,
                        mode="lines",
                        line=dict(width=0),
                        showlegend=False,
                        hoverinfo="skip",
                        hovertemplate="P75: %{y:.2f}<extra></extra>",  # B·ªè n·∫øu kh√¥ng c·∫ßn hover P75
                    )
                )
                fig.add_trace(
                    go.Scatter(
                        x=time_slots,
                        y=p25,
                        mode="lines",
                        line=dict(width=0),
                        fill="tonexty",
                        fillcolor="rgba(173, 216, 230, 0.6)",  # Light Blue
                        name="T·∫ßn su·∫•t 25-75",  # T√™n trong legend
                        hoverinfo="skip",
                        hovertemplate="P25: %{y:.2f}<extra></extra>",  # B·ªè n·∫øu kh√¥ng c·∫ßn hover P25
                        # hovertemplate='Khung gi·ªù: %{x}<br>P25: %{y:.2f}<extra></extra>'
                    )
                )

                # 3. ƒê∆∞·ªùng Median (P50) (M√†u xanh d∆∞∆°ng ƒë·∫≠m)
                fig.add_trace(
                    go.Scatter(
                        x=time_slots,
                        y=p50,
                        mode="lines+markers",
                        marker=dict(size=6, color="blue"),  # M√†u xanh d∆∞∆°ng ƒë·∫≠m
                        line=dict(color="blue", width=2.5),  # D√†y h∆°n ch√∫t
                        name="Trung b√¨nh",  # T√™n trong legend
                        hovertemplate="Mean: %{y:.2f}<extra></extra>",
                    )
                )

                # Layout
                fig.update_layout(
                    title=None,
                    annotations=[
                        dict(
                            text=f"<b>Th·ªëng k√™ c√¥ng su·∫•t theo khung gi·ªù - {nmtd} - {month}/{year}</b>",
                            xref="paper",
                            yref="paper",
                            x=0.45,
                            y=1.1,
                            xanchor="center",
                            yanchor="top",
                            showarrow=False,
                            font=dict(size=18, color="black"),
                        )
                    ],
                    template="plotly_white",
                    height=600,
                    hovermode="x unified",
                    xaxis_title=None,
                    yaxis_title="Gi√° tr·ªã c√¥ng su·∫•t",
                    xaxis=dict(
                        tickmode="array",
                        tickvals=time_slots[:],  # T·∫•t c·∫£ c√°c khung gi·ªù
                        ticktext=[t for t in time_slots],
                        showgrid=True,
                        gridcolor="lightgrey",
                        griddash="dot",
                        title_font=dict(size=14, color="black"),
                        ticklabelposition="outside",
                        ticks="outside",
                        ticklen=8,
                        tickangle=-90,  # Xoay nh√£n n·∫øu c·∫ßn
                    ),
                    yaxis=dict(
                        rangemode="tozero",
                        showgrid=True,
                        gridcolor="lightgrey",
                        griddash="dot",
                        title_font=dict(size=14, color="black", weight="bold"),
                        ticklabelposition="outside",
                        ticks="outside",
                        ticklen=8,
                    ),
                    legend=dict(yanchor="top", y=0.99, xanchor="right", x=0.99),
                    margin=dict(l=60, r=40, t=80, b=80),
                    paper_bgcolor="white",
                    plot_bgcolor="#f0f8ff",
                )
                fig.add_annotation(
                    text="<b>Khung gi·ªù</b>",
                    xref="paper",
                    yref="paper",
                    x=0.45,
                    y=-0.18,
                    showarrow=False,
                    font=dict(size=14, color="black"),
                )
                fig.show()

            except Exception as e:
                print(f"‚ùå L·ªói v·∫Ω bi·ªÉu ƒë·ªì th·ªëng k√™ Plotly GO: {e}")

    # ========== H√ÄM X·ª¨ L√ù S·ª∞ KI·ªÜN THAY ƒê·ªîI DROPDOWN (Gi·ªØ nguy√™n) ==========
    def on_change_month_plot(change):
        if tabs.selected_index == 0 and all(
            w.value is not None for w in month_plot_widgets
        ):
            if change is None or (
                isinstance(change, dict) and change.get("new") != change.get("old")
            ):
                plot_filtered(
                    "month",
                    ctdl_dropdown_month_plot.value,
                    nmtd_dropdown_month_plot.value,
                    year_dropdown_month_plot.value,
                    month_dropdown_month_plot.value,
                )

    def on_change_day_plot(change):
        if tabs.selected_index == 1 and all(
            w.value is not None for w in day_plot_widgets
        ):
            if change is None or (
                isinstance(change, dict) and change.get("new") != change.get("old")
            ):
                plot_filtered(
                    "day",
                    ctdl_dropdown_day_plot.value,
                    nmtd_dropdown_day_plot.value,
                    year_dropdown_day_plot.value,
                    month_dropdown_day_plot.value,
                    day_dropdown_day_plot.value,
                )

    def on_change_stat(change):
        if tabs.selected_index == 2 and all(w.value is not None for w in stat_widgets):
            if change is None or (
                isinstance(change, dict) and change.get("new") != change.get("old")
            ):
                plot_timeslot_stats(
                    ctdl_dropdown_stat.value,
                    nmtd_dropdown_stat.value,
                    madiemdo_dropdown_stat.value,
                    year_dropdown_stat.value,
                    month_dropdown_stat.value,
                )

    # ========== H√ÄM T·∫ÆT / B·∫¨T OBSERVER (Gi·ªØ nguy√™n) ==========
    _observed_callbacks = {}

    def disable_observe(widgets_list):
        for w in widgets_list:
            if w in _observed_callbacks and _observed_callbacks[w]["active"]:
                try:
                    w.unobserve(_observed_callbacks[w]["func"], names="value")
                    _observed_callbacks[w]["active"] = False
                except:
                    _observed_callbacks[w]["active"] = (
                        False  # Ignore errors during unobserve
                    )

    def enable_observe(widgets_list):
        for w in widgets_list:
            if (
                w in _observed_callbacks
                and not w.disabled
                and not _observed_callbacks[w]["active"]
            ):
                try:
                    w.observe(_observed_callbacks[w]["func"], names="value")
                    _observed_callbacks[w]["active"] = True
                except Exception as e:
                    print(f"L·ªói observe {w.description}: {e}")

    # ========== G·∫ÆN OBSERVER BAN ƒê·∫¶U (Gi·ªØ nguy√™n) ==========
    for w in month_plot_widgets:
        _observed_callbacks[w] = {"func": on_change_month_plot, "active": False}
    for w in day_plot_widgets:
        _observed_callbacks[w] = {"func": on_change_day_plot, "active": False}
    for w in stat_widgets:
        _observed_callbacks[w] = {"func": on_change_stat, "active": False}

    # ========== T·∫†O GIAO DI·ªÜN TABS (Gi·ªØ nguy√™n) ==========
    tab_month_plot = widgets.HBox(
        month_plot_widgets + [placeholder_month_plot],
        layout=widgets.Layout(
            justify_content="flex-start", align_items="flex-end", overflow="visible"
        ),
    )
    tab_day_plot = widgets.HBox(
        day_plot_widgets,
        layout=widgets.Layout(
            justify_content="flex-start", align_items="flex-end", overflow="visible"
        ),
    )
    tab_stat = widgets.HBox(
        stat_widgets,
        layout=widgets.Layout(
            justify_content="flex-start", align_items="flex-end", overflow="visible"
        ),
    )
    tabs = widgets.Tab(children=[tab_month_plot, tab_day_plot, tab_stat])
    tabs.set_title(0, "üìÖ Bi·ªÉu ƒë·ªì th√°ng")
    tabs.set_title(1, "üóìÔ∏è Bi·ªÉu ƒë·ªì ng√†y")
    tabs.set_title(2, "üìä Th·ªëng k√™ th√°ng")

    # ========== X·ª¨ L√ù CHUY·ªÇN TAB (ƒê·ªìng b·ªô h√≥a - S·ª≠a l·∫°i current_tab_index) ==========
    # S·ª≠ d·ª•ng bi·∫øn n√†y trong scope c·ªßa cell, kh√¥ng c·∫ßn global
    current_tab_index = tabs.selected_index

    # ========== X·ª¨ L√ù CHUY·ªÇN TAB (ƒê·ªìng b·ªô h√≥a - S·ª≠a l·∫°i) ==========
    # Kh√¥ng c·∫ßn bi·∫øn current_tab_index n·ªØa v√¨ ta s·∫Ω s·ª≠ d·ª•ng change["old"]
    def on_tab_change(change):
        if change["name"] == "selected_index":
            new_tab_index = change["new"]
            old_tab_index = change["old"]  # S·ª≠ d·ª•ng gi√° tr·ªã old t·ª´ thay ƒë·ªïi

            # --- T·∫Øt observer tab c≈© ---
            if old_tab_index == 0:
                disable_observe(month_plot_widgets)
            elif old_tab_index == 1:
                disable_observe(day_plot_widgets)
            elif old_tab_index == 2:
                disable_observe(stat_widgets)

            # --- X√°c ƒë·ªãnh ngu·ªìn ƒë·ªìng b·ªô ---
            source_widgets = {}  # Dictionary ƒë·ªÉ l∆∞u widget ngu·ªìn
            if old_tab_index == 0:
                source_widgets = {
                    "ctdl": ctdl_dropdown_month_plot,
                    "nmtd": nmtd_dropdown_month_plot,
                    "year": year_dropdown_month_plot,
                    "month": month_dropdown_month_plot,
                }
            elif old_tab_index == 1:
                source_widgets = {
                    "ctdl": ctdl_dropdown_day_plot,
                    "nmtd": nmtd_dropdown_day_plot,
                    "year": year_dropdown_day_plot,
                    "month": month_dropdown_day_plot,
                    "day": day_dropdown_day_plot,
                }
            elif old_tab_index == 2:
                source_widgets = {
                    "ctdl": ctdl_dropdown_stat,
                    "nmtd": nmtd_dropdown_stat,
                    "year": year_dropdown_stat,
                    "month": month_dropdown_stat,
                }
            else:  # Kh·ªüi t·∫°o
                source_widgets = {
                    "ctdl": ctdl_dropdown_month_plot,
                    "nmtd": nmtd_dropdown_month_plot,
                    "year": year_dropdown_month_plot,
                    "month": month_dropdown_month_plot,
                }

            # --- X√°c ƒë·ªãnh widgets ƒë√≠ch c·ªßa tab m·ªõi ---
            target_widgets = {}
            if new_tab_index == 0:
                target_widgets = {
                    "ctdl": ctdl_dropdown_month_plot,
                    "nmtd": nmtd_dropdown_month_plot,
                    "year": year_dropdown_month_plot,
                    "month": month_dropdown_month_plot,
                }
            elif new_tab_index == 1:
                target_widgets = {
                    "ctdl": ctdl_dropdown_day_plot,
                    "nmtd": nmtd_dropdown_day_plot,
                    "year": year_dropdown_day_plot,
                    "month": month_dropdown_day_plot,
                    "day": day_dropdown_day_plot,
                }
            elif new_tab_index == 2:
                target_widgets = {
                    "ctdl": ctdl_dropdown_stat,
                    "nmtd": nmtd_dropdown_stat,
                    "madiemdo": madiemdo_dropdown_stat,
                    "year": year_dropdown_stat,
                    "month": month_dropdown_stat,
                }

            # --- ƒê·ªìng b·ªô t·ª´ ngu·ªìn sang ƒë√≠ch ---
            if old_tab_index != new_tab_index and old_tab_index is not None:
                # ƒê·ªìng b·ªô CTDL
                if (
                    source_widgets.get("ctdl")
                    and source_widgets["ctdl"].value is not None
                ):
                    target_widgets["ctdl"].value = source_widgets["ctdl"].value

                # ƒê·ªìng b·ªô NMTD (ph·∫£i c·∫≠p nh·∫≠t options tr∆∞·ªõc)
                target_nmtd = target_widgets["nmtd"]
                update_nmtd(target_widgets["ctdl"].value, target_nmtd)
                if (
                    source_widgets.get("nmtd")
                    and source_widgets["nmtd"].value in target_nmtd.options
                ):
                    target_nmtd.value = source_widgets["nmtd"].value
                # ƒê·ªìng b·ªô MADIEMDO (ph·∫£i c·∫≠p nh·∫≠t options tr∆∞·ªõc)
                if new_tab_index == 2 and "madiemdo" in target_widgets:
                    update_madiemdo(
                        target_widgets["ctdl"].value,
                        target_widgets["nmtd"].value,
                        target_widgets["madiemdo"],
                    )

                # ƒê·ªìng b·ªô Year
                if (
                    source_widgets.get("year")
                    and source_widgets["year"].value is not None
                ):
                    target_widgets["year"].value = source_widgets["year"].value

                # ƒê·ªìng b·ªô Month
                if (
                    source_widgets.get("month")
                    and source_widgets["month"].value is not None
                ):
                    target_widgets["month"].value = source_widgets["month"].value

                # N·∫øu chuy·ªÉn sang tab ng√†y, c·∫≠p nh·∫≠t dropdown ng√†y
                if "day" in target_widgets:
                    update_day_options()  # C·∫≠p nh·∫≠t options ng√†y d·ª±a tr√™n nƒÉm/th√°ng ƒë√£ ch·ªçn
                    # M·∫∑c ƒë·ªãnh ch·ªçn ng√†y 1 n·∫øu ƒë·∫øn t·ª´ tab kh√°c
                    if old_tab_index != 1 and target_widgets["day"].options:
                        target_widgets["day"].value = 1

            # --- K√≠ch ho·∫°t observer v√† c·∫≠p nh·∫≠t n·ªôi dung tab m·ªõi ---
            if new_tab_index == 0:
                enable_observe(month_plot_widgets)
                on_change_month_plot(None)  # G·ªçi h√†m v·∫Ω/t√≠nh to√°n t∆∞∆°ng ·ª©ng
            elif new_tab_index == 1:
                enable_observe(day_plot_widgets)
                on_change_day_plot(None)
            elif new_tab_index == 2:
                enable_observe(stat_widgets)
                on_change_stat(None)

    tabs.observe(on_tab_change, names="selected_index")

    # ========== HI·ªÇN TH·ªä ==========
    print("‚úÖ Giao di·ªán s·∫µn s√†ng!")
    display(tabs, out)

    # ========== K√çCH HO·∫†T BAN ƒê·∫¶U ==========
    # K√≠ch ho·∫°t l·∫ßn ƒë·∫ßu b·∫±ng c√°ch g·ªçi on_tab_change m√¥ ph·ªèng v·ªõi old=None
    on_tab_change(
        {
            "name": "selected_index",
            "old": None,
            "new": tabs.selected_index,
            "owner": tabs,
            "type": "change",
        }
    )
elif df_all.empty:
    print("\n‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·∫ßu v√†o t·ª´ file Parquet.")
else:  # df_sanluong ho·∫∑c df_sanluong_indexed r·ªóng
    print("\n‚ùå L·ªói ti·ªÅn x·ª≠ l√Ω ho·∫∑c kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá.")
